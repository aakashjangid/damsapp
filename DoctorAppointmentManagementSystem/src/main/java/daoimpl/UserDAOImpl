package com.yash.damsapp.daoimpl;

import java.util.List;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.yash.damsapp.dao.UserDAO;
import com.yash.damsapp.domain.User;
import com.yash.damsapp.rowmapper.UserMapper;

/**
 * This interface will perform operations related to User.
 * 
 * @author aakash.jangid
 *
 */
@Repository
public class UserDAOImpl implements UserDAO {

	/**
	 * This is the JDBC Template which will perform all the database transactions
	 * for us. It will also manage all the connection and pooling by itself. We have
	 * to fire query using jdbc template.
	 */
	private JdbcTemplate jdbcTemplate;

	/**
	 * This method is used to set the data-source object in the JDBC template
	 * reference, so that it can perform transactions in the database.
	 * 
	 * @param dataSource This dataSource we are setting in the xml file.
	 */
	@Autowired
	public void setDataSource(DataSource dataSource) {
		this.jdbcTemplate = new JdbcTemplate(dataSource);
	}

	/**
	 * This method will insert a user into the database. We have received a user
	 * information with the help of data traveler and we have send this information
	 * to the database.
	 * 
	 * @return boolean This method will return true if the data is inserted into the
	 *         database successfully. This method will return false if any error
	 *         occurs while inserting the information in the database.
	 */
	public boolean insert(User user) {
		boolean check = false;
		try {
			String sql = "INSERT INTO users(first_name, last_name, contact, email, address, loginname, password) VALUES(?,?,?,?,?,?,?)";
			Object[] params = new Object[] { user.getFirst_name(), user.getLast_name(), user.getContact(),
					user.getEmail(), user.getAddress(), user.getLoginname(), user.getPassword() };
			jdbcTemplate.update(sql, params);
			check = true;
		} catch (Exception e) {
			return check;
		}
		return check;
	}

	public List<User> listUser() {
		List<User> allUsers = null;
		try {
			String sql = "SELECT * FROM users WHERE role=2";
			allUsers = jdbcTemplate.query(sql, new UserMapper());
		}catch(Exception e) {
			e.printStackTrace();
		}
		return allUsers;
	}

	public void blockUser(String userId) {
		try {
			String sql = "UPDATE users SET status=2 WHERE id=?";
			jdbcTemplate.update(sql,userId);
		}catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void update(User userUpdated) {
		try {
			String sql = "UPDATE users SET first_name=?, last_name=?, contact=?, email=?, address=? WHERE id=?";
			jdbcTemplate.update(sql, userUpdated.getFirst_name(), userUpdated.getLast_name(), userUpdated.getContact(),
					userUpdated.getEmail(), userUpdated.getAddress(), userUpdated.getId());
		}catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void updatePassword(Integer id, String oldPassword, String newPassword, String reNewPassword) {
		try {
			String sql = "UPDATE users SET password=? WHERE id=? AND password=?";
			jdbcTemplate.update(sql, newPassword, id, oldPassword);
		}catch (Exception e) {
			e.printStackTrace();
		}
	}

}
